// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PizzaPlanet.Kitchen.API.Context;

#nullable disable

namespace PizzaPlanet.Kitchen.API.Migrations
{
    [DbContext(typeof(KitchenDbContext))]
    [Migration("20230125182907_initialv4")]
    partial class initialv4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.CooksEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cook");
                });

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.Orders_Completed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CookId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.ToTable("OrdersCompleted");
                });

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.Pizzas_Completed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CookId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PizzaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CookId");

                    b.ToTable("PizzasCompleted");
                });

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.Orders_Completed", b =>
                {
                    b.HasOne("PizzaPlanet.Kitchen.API.Entities.CooksEntity", "CookEntity")
                        .WithMany("OrdersCompleted")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CookEntity");
                });

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.Pizzas_Completed", b =>
                {
                    b.HasOne("PizzaPlanet.Kitchen.API.Entities.CooksEntity", "CookEntity")
                        .WithMany("PizzasCompleted")
                        .HasForeignKey("CookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CookEntity");
                });

            modelBuilder.Entity("PizzaPlanet.Kitchen.API.Entities.CooksEntity", b =>
                {
                    b.Navigation("OrdersCompleted");

                    b.Navigation("PizzasCompleted");
                });
#pragma warning restore 612, 618
        }
    }
}
